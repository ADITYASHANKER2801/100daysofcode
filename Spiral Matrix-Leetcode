class Solution {
public:
    vector<int> spiralOrder(std::vector<std::vector<int>>& matrix) {
        vector<int> result;
        if (matrix.empty()) return result;      
        int m = matrix.size();
        int n = matrix[0].size();   
        int rowBegin = 0, rowEnd = m - 1;
        int colBegin = 0, colEnd = n - 1; 
        while (rowBegin <= rowEnd && colBegin <= colEnd) {
            for (int i = colBegin; i <= colEnd; ++i) {
                result.push_back(matrix[rowBegin][i]);
            }
            ++rowBegin;
            for (int i = rowBegin; i <= rowEnd; ++i) {
                result.push_back(matrix[i][colEnd]);
            }
            --colEnd;
            if (rowBegin <= rowEnd) {
                for (int i = colEnd; i >= colBegin; --i) {
                    result.push_back(matrix[rowEnd][i]);
                }
            }
            --rowEnd;
            if (colBegin <= colEnd) {
                for (int i = rowEnd; i >= rowBegin; --i) {
                    result.push_back(matrix[i][colBegin]);
                }
            }
            ++colBegin;
        } 
        return result;
    }
};

