class Solution {
public:
    bool exist(vector<vector<char>>& board, string word) {
        int n=board.size();
        int m=board[0].size();
        vector<vector<bool>> visited(n, vector<bool>(m,false));
        for(int i=0; i<n; i++){
            for(int j=0; j<m; j++){
                if(word[0]==board[i][j] && solve(board,word,i,j,0,visited)){
                    
                    return true;
                }
            }
        }
        return false;
        
    }
    bool solve(vector<vector<char>>& board, string word,int row,int col,int ind,vector<vector<bool>> &visited){
        if(word.length()==ind){
            return true;
        }
        if(row<0 || col<0 || row>=board.size() || col>=board[0].size() || visited[row][col]==true||board[row][col]!=word[ind]){
            return false;
        }
        visited[row][col]=true;
        bool opt1= solve(board,word,row+1,col,ind+1,visited);
        bool opt2= solve(board,word,row-1,col,ind+1,visited);
        bool opt3= solve(board,word,row,col+1,ind+1,visited);
        bool opt4= solve(board,word,row,col-1,ind+1,visited);

        visited[row][col]=false;
        
        return opt1|| opt2 || opt3 || opt4;
    }
};
